import React, { useState, useEffect } from 'react';
import moment, { Moment } from 'moment';
import intl from 'react-intl-universal';
import { Card, Button, Table, Form, Select, Input } from 'antd';
import Page from '@/components/Page';
import { renderColTime, renderColStatus } from '@/components/TableHeader';
import DateSearch from '@/components/DateSearch';
import { ColumnProps } from 'antd/es/table';
import { MailHistoryItem, getMailHistory } from '@/services/mail/history';
import { HistoryStatusEnum } from '@/config/smsMail';
import { openNewWindow } from '@/utils/tools';
import { Pagination } from '@/models/common';
import './index.less';

const statuses = [0, 1, 2, 3];

const MassSent: React.FC<{}> = () => {
  const [isLoading, setLoading] = useState(true);
  const [dataList, setDataList] = useState<MailHistoryItem[]>([]);
  const [dates, setDates] = useState<[Moment, Moment]>([moment(), moment()]);
  const [pagination, setPagination] = useState<Pagination>({ defaultPageSize: 10, total: 0, current: 1 });
  const formValue = { email: '', status: 0 };

  // get list of email sent history
  const getList = async () => {
    const { status, email } = formValue;
    console.log({ status, email });
    setLoading(true);
    const preload = {
      begin: moment(dates[0].format('YYYY-MM-DD')).unix() * 1000,
      end: moment(dates[1].format('YYYY-MM-DD')).unix() * 1000 + 24 * 60 * 60 * 1000 - 1,
      status,
      email,
      pageNo: pagination.current,
    };
    const result = await getMailHistory(preload);
    if (result && result.code === 0 && result.data) {
      setDataList(result.data.list || []);
      setPagination({ ...pagination, total: result.data.totalCount });
    }
    setLoading(false);
  };

  const onDateChange = (e: [Moment, Moment]) => setDates(e);

  // listen pagination.current for get history list
  useEffect(() => {
    getList();
  }, [pagination.current]);

  const searchHistaory = ({ email, status }: any) => {
    formValue.email = email;
    formValue.status = status;
    getList();
  };

  const renderColButton = (item: MailHistoryItem) => {
    return (
      <span className="template-operation">
        <Button size="small" onClick={() => openNewWindow(item.emailContent)}>
          {intl.get('preview')}
        </Button>
      </span>
    );
  };

  const columns: ColumnProps<MailHistoryItem>[] = [
    {
      title: intl.get('mail.tpl.title'),
      dataIndex: 'emailTitle',
    },
    {
      title: intl.get('sms.send.to'),
      dataIndex: 'receivedUserEmail',
    },
    {
      title: intl.get('sms.send.time'),
      dataIndex: 'sendTime',
      render: renderColTime,
    },
    {
      title: intl.get('sms.history.status'),
      dataIndex: 'emailStatus',
      render: renderColStatus,
    },
    {
      title: intl.get('sms.history.remark'),
      dataIndex: 'statusDescribe',
    },
    {
      title: intl.get('sms.tpl.operate'),
      render: renderColButton,
    },
  ];

  return (
    <Page className="sms-sent" title={intl.get('mail.history.title')}>
      <DateSearch onChange={onDateChange} />
      <Card bordered={true}>
        <Form className="sms-sent-search-form" name="search" onFinish={searchHistaory} initialValues={formValue}>
          <Form.Item label={intl.get('mail.history.to')} name="email" className="form-tel-number">
            <Input type="text" />
          </Form.Item>
          <Form.Item label={intl.get('sms.history.status')} name="status">
            <Select>
              {statuses.map((status) => (
                <Select.Option value={status} key={`status-${status}`}>
                  {intl.get(HistoryStatusEnum[status])}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>
          <Form.Item className="submit">
            <Button type="primary" htmlType="submit">
              {intl.get('search')}
            </Button>
          </Form.Item>
        </Form>
        <Table
          size="small"
          loading={isLoading}
          columns={columns}
          rowKey="id"
          dataSource={dataList}
          bordered
          onChange={(e) => {
            setPagination({ ...pagination, current: e.current || 1 });
          }}
          pagination={pagination}
        />
      </Card>
    </Page>
  );
};

export default MassSent;
